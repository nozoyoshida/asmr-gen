--- Google GenAI SDK に移行する — Gemini API 移行ページ（完全版まとめ） ---

## 概要

- Google GenAI SDK（新 SDK）は、2024 年後半に Gemini 2.0 リリースと共に導入され、2025 年 5 月時点で全プラットフォームで一般提供（GA）されました。開発体験が改善され、ワークフロー間の移行も容易になります。レガシーライブラリを使っている場合は移行が強く推奨されます。

---

## インストール

| 言語 | 旧ライブラリ | 新ライブラリ（Google GenAI SDK） |
|------|----------------|----------------------------|
| Python | pip install -U -q "google-generativeai" | pip install -U -q "google-genai" |
| JavaScript | npm install @google/generative-ai | npm install @google/genai |
| Go | go get github.com/google/generative-ai-go | go get google.golang.org/genai |

---

## 認証と API クライアントの作成

### 旧方式（認証・クライアント）

- Python
  ```python
  import google.generativeai as genai
  genai.configure(api_key=...)
  ```
- JavaScript
  ```js
  import { GoogleGenerativeAI } from "@google/generative-ai";
  const genAI = new GoogleGenerativeAI("GOOGLE_API_KEY");
  ```
- Go
  ```go
  import (
    "github.com/google/generative-ai-go/genai"
    "google.golang.org/api/option"
  )
  client, err := genai.NewClient(ctx, option.WithAPIKey("GOOGLE_API_KEY"))
  ```

### 新方式（Google GenAI SDK）

- クライアントは Client オブジェクトを通じて統一的に操作可能で、複数サービス（models, chats, files, tuningsなど）をサポート。認証は環境変数または明示的引数で設定します。

#### Python
```bash
export GEMINI_API_KEY="YOUR_API_KEY"
```
```python
from google import genai
client = genai.Client()  # または client = genai.Client(api_key="your_api_key")
```

#### JavaScript
```js
import { GoogleGenAI } from "@google/genai";
const ai = new GoogleGenAI({ apiKey: "GEMINI_API_KEY" });
```

#### Go
```go
import "google.golang.org/genai"
client, err := genai.NewClient(ctx, &genai.ClientConfig{
    Backend: genai.BackendGeminiAPI,
})
```

---

## コンテンツ生成：テキスト／画像

### テキスト生成の比較（旧 → 新）

- 旧（Python）
  ```python
  import google.generativeai as genai
  model = genai.GenerativeModel('gemini-1.5-flash')
  response = model.generate_content('Tell me a story in 300 words')
  print(response.text)
  ```

- 新（Python）
  ```python
  from google import genai
  client = genai.Client()
  response = client.models.generate_content(
      model='gemini-2.0-flash',
      contents='Tell me a story in 300 words.'
  )
  print(response.text)
  print(response.model_dump_json(exclude_none=True, indent=4))
  ```

- JavaScript（新）
  ```js
  import { GoogleGenAI } from "@google/genai";
  const ai = new GoogleGenAI({ apiKey: "GOOGLE_API_KEY" });
  const response = await ai.models.generateContent({
    model: "gemini-2.0-flash",
    contents: "Tell me a story in 300 words.",
  });
  console.log(response.text);
  ```

- Go（新）
  ```go
  client, err := genai.NewClient(ctx, nil)
  result, err := client.Models.GenerateContent(
      ctx, "gemini-2.0-flash", genai.Text("Tell me a story in 300 words."), nil)
  debugPrint(result)
  ```

### 画像関連ツール使用例（Python）

```python
from google import genai
from google.genai import types

client = genai.Client()
response = client.models.generate_content(
    model='gemini-2.0-flash',
    contents='What is the Google stock price?',
    config=types.GenerateContentConfig(
        tools=[types.Tool(
            google_search=types.GoogleSearch()
        )]
    )
)
```

また、コード実行ツールを使う例も紹介されています。

---

## Gemini Developer API vs Vertex AI Gemini API

- 両方を一つの google-genai ライブラリで利用可能。例えば、Vertex AI 用クライアントには vertexai=True と project, location を指定します。

### Python 例：Vertex AI
```python
from google import genai
client = genai.Client(
    vertexai=True, project='your-project-id', location='us-central1'
)
response = client.models.generate_content(
    model="gemini-2.0-flash", contents="Explain how AI works in a few words"
)
print(response.text)
```

### JavaScript 例：Vertex AI
```js
import { GoogleGenAI } from '@google/genai';
const ai = new GoogleGenAI({
  vertexai: true,
  project: 'your_project',
  location: 'your_location',
});
const response = await ai.models.generateContent({
  model: "gemini-2.0-flash",
  contents: "Explain how AI works in a few words",
});
console.log(response.text);
```

### Go 例：Vertex AI
```go
client, err := genai.NewClient(ctx, &genai.ClientConfig{
    Project: project,
    Location: location,
    Backend: genai.BackendVertexAI,
})
result, err := client.Models.GenerateContent(ctx, "gemini-2.0-flash", genai.Text("Tell me about New York?"), nil)
```

---

## 移行に関する考慮事項

- Vertex AI への移行時には、サービスアカウント認証と IAMによるロール設定（Vertex AI User など）が必要。
- 使用するリージョンの違いや、それに伴うモデルの再トレーニングなども重要。
- レガシーライブラリ（python: google-generativeai、JS: @google/generativeai、Go: google.golang.org/generative-ai）のサポートは 2025年11月30日 に終了予定。

---

## ライブラリ（Gemini API）とサポート状況

- Python, JavaScript/TypeScript, Go, Java 向けに Google が提供する GenAI SDK が推奨されており、GA で安定的な本番利用が可能。
- レガシーライブラリは順次廃止されていき、移行が推奨されています。

---

## まとめ：テキストファイル形式のサンプル構成

--- Google GenAI SDK に移行する — Gemini API 移行ページ --

# 概要
...

# インストール
- Python: 旧 → 新
- JavaScript: 旧 → 新
- Go: 旧 → 新

# 認証とクライアントの作成
## 旧方式コードと、新方式コード例：Python / JavaScript / Go

# コンテンツ生成
## テキスト生成（コード比較）
## 画像やツール連携の例（Pythonなど）

# Gemini Developer API vs Vertex AI Gemini API
## Python / JavaScript / Go の移行コード例

# 移行時の注意事項
## 認証方法、IAM設定、再トレーニング、リージョン、APIキー削除など

# レガシーライブラリのサポート終了予定

# その他のリソース（クイックスタート、API リファレンス等）
